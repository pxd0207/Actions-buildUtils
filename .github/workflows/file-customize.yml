name: 'Ëá™ÂÆö‰πâÊûÑÂª∫Âπ∂‰∏ãËΩΩ'

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      repoPath:
        description: 'git‰ªìÂ∫ìË∑ØÂæÑ'
        required: true
      SETTING_SEHLL_URL:
        description: 'ËÆæÁΩÆÊûÑÂª∫ÁéØÂ¢ÉÁöÑshellÂú∞ÂùÄ'
        required: false
      BUILD_BEFORE_SHELL_URL:
        description: 'ÊûÑÂª∫ÂâçshellÂú∞ÂùÄ'
        required: false
      BUILD_SHELL_URL:
        description: 'ÊûÑÂª∫shellÂëΩ‰ª§,ËæìÂá∫Ë¶ÅÊ±ÇËæìÂá∫Êñá‰ª∂'
        required: true
      BUILD_AFTER_SHELL_URL:
        description: 'ÊûÑÂª∫ÂêéshellÂëΩ‰ª§'
        required: false
      BUILD_TARGET_PATH:
        description: 'ÊûÑÂª∫‰∫ßÁâ©Ë∑ØÂæÑ'
        required: true
      UPLOAD_TRANSFER:
        description: '‰∏ä‰º†ÊúçÂä°,Â¶Çwet,ËßÅgithub.com/Mikubill/transfer#support'
        required: false
      UPLOAD_RELEASE:
        description: 'ÊòØÂê¶‰∏ä‰º†Âà∞RELEASEÈ°µÈù¢'
        required: false
        default: 'false'
      UPLOAD_TAG:
        description: '‰∏ä‰º†Êñá‰ª∂Áî®ÁöÑTAG,ÈªòËÆ§‰ΩøÁî®ÊûÑÂª∫Êó∂Èó¥'
        required: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check Out
        uses: actions/checkout@v3
      # ‰∫ßÁîütag
      - name: Generate tag
        id: tag
        run: |
          tag=build-customize_$(date +'%m-%d_%H-%M-%S')
          [ ! "${{github.event.inputs.UPLOAD_TAG}}" = "" ] && tag=${{github.event.inputs.UPLOAD_TAG}}
          echo "tag=$tag" >> $GITHUB_OUTPUT

      # ÂºÄÂßãÊûÑÂª∫
      - name: Build
        id: build
        run: |
          rm -rf /tmp/dist
          mkdir -p /tmp/dist
          mkdir -p /tmp/build_log
          echo -e "github actions build\nstart time: $(date +'%Y-%m-%d %H:%M:%S')\n" > release.txt
          start=$(date +%s)
          //todo
          if [[ "${{ github.event.inputs.shellUrl }}" ]] ;then wget "${{github.event.inputs.shellUrl}}" -O /tmp/.customize_shell.sh ; chmod +x /tmp/.customize_shell.sh && /tmp/.customize_shell.sh; fi
          if [[ "${{ github.event.inputs.shellUrl }}" ]] ;then wget "${{github.event.inputs.shellUrl}}" -O /tmp/.customize_shell.sh ; chmod +x /tmp/.customize_shell.sh && /tmp/.customize_shell.sh; fi
          if [[ "${{ github.event.inputs.shellUrl }}" ]] ;then wget "${{github.event.inputs.shellUrl}}" -O /tmp/.customize_shell.sh ; chmod +x /tmp/.customize_shell.sh && /tmp/.customize_shell.sh; fi
          if [[ "${{ github.event.inputs.shellUrl }}" ]] ;then wget "${{github.event.inputs.shellUrl}}" -O /tmp/.customize_shell.sh ; chmod +x /tmp/.customize_shell.sh && /tmp/.customize_shell.sh; fi
          if [[ "${{ github.event.inputs.shellUrl }}" ]] ;then wget "${{github.event.inputs.shellUrl}}" -O /tmp/.customize_shell.sh ; chmod +x /tmp/.customize_shell.sh && /tmp/.customize_shell.sh; fi
          end=$(date +%s)
          take=$(( end - start ))
          echo "end time: $(date +'%Y-%m-%d %H:%M:%S')" >> release.txt
          echo "all build use ${take}s" >> release.txt
          echo >> release.txt
          cp -r /tmp/dist/ dist
          tar -zcvf dist.tar.gz dist > /dev/null

      # ‰∏ä‰º†ÊûÑÂª∫Êó•Âøó
      - name: Upload build logs
        uses: actions/upload-artifact@main
        with:
          name: log_${{ steps.tag.outputs.tag }}
          path: /tmp/build_log
          retention-days: 1

      # ‰∏ä‰º†ÊûÑÂª∫‰∫ßÁâ©
      - name: Upload firmware directory
        uses: actions/upload-artifact@main
        with:
          name: ${{ steps.tag.outputs.tag }}
          path: dist.tar.gz
          retention-days: 1

      # ‰∏ä‰º†Âà∞‰∏≠ËΩ¨ÊúçÂä°
      - name: Upload firmware to transfer
        if: github.event.inputs.UPLOAD_TRANSFER && !failure() && !cancelled()
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer ${{ github.event.inputs.UPLOAD_TRANSFER }} --no-progress dist.tar.gz 2>&1 | tee transfer.log
          url=$(cat transfer.log | grep https | cut -f3 -d" ")
          echo "üîó External Download Link: $url" >> release.txt
          echo "::warning ::External Download Link: $url"

      # ÁîüÊàêrelease
      - name: Upload firmware to release
        uses: softprops/action-gh-release@v1
        if: github.event.inputs.UPLOAD_RELEASE == 'true' && !failure() && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          body_path: release.txt
          files: dist/*
