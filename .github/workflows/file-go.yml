name: file-go

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      repoPath:
        description: 'git仓库路径'
        required: true
      shellUrl:
        description: '自定义构建前脚本下载路径,可空'
        required: false
      GO_VERSION:
        description: 'go版本'
        required: false
        default: '1.19'
      UPLOAD_COWTRANSFER:
        description: '是否上传到奶牛快传'
        required: false
        default: 'false'
      UPLOAD_WERANSFER:
        description: '是否上传到WERANSFER'
        required: false
        default: 'false'
      UPLOAD_RELEASE:
        description: '是否上传到RELEASE页面'
        required: false
        default: 'false'
      UPLOAD_TAG:
        description: '上传文件用的TAG,默认使用构建时间'
        required: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check Out
        uses: actions/checkout@v2
      # 产生tag
      - name: Generate tag
        id: tag
        run: |
          tag=$(date +'%m-%d_%H-%M-%S')
          [ ! "${{github.event.inputs.UPLOAD_TAG}}" = "" ] && tag=${{github.event.inputs.UPLOAD_TAG}}
          echo "::set-output name=tag::$(date +"%Y.%m.%d-%H%M")"

      # 克隆目标,并且准备上下文
      - name: Git clone
        run: |
         rm -rf {*,.[^.]*,..?*}
         git clone "${{github.event.inputs.repoPath}}" .
         if [[ "${{ github.event.inputs.dockerFileUrl }}" ]] ;then wget "${{github.event.inputs.dockerFileUrl}}" -O ./Dockerfile ; fi
         if [[ "${{ github.event.inputs.shellUrl }}" ]] ;then wget "${{github.event.inputs.shellUrl}}" -O /tmp/.customize_shell.sh ; chmod +x /tmp/.customize_shell.sh && /tmp/.customize_shell.sh; fi

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ github.event.inputs.GO_VERSION }}

      # 开始构建
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          args: build --skip-validate --rm-dist --timeout 90m
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # 上传构建产物
      - name: Upload firmware directory
        uses: actions/upload-artifact@main
        with:
          name: ${{ steps.tag.outputs.tag }}
          path: dist

      # 上传到奶牛
      - name: Upload firmware to cowtransfer
        id: cowtransfer
        if: github.event.inputs.UPLOAD_COWTRANSFER == 'true' && !cancelled()
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer cow --block 2621440 -s -p 64 --no-progress "${{ steps.tag.outputs.tag }}" 2>&1 | tee cowtransfer.log
          echo "cowtransfer url: $(cat cowtransfer.log | grep https)" >> $GITHUB_STATE
          echo "::set-output name=url::$(cat cowtransfer.log | grep https | cut -f3 -d" ")"

      # 上传到WeTransfer
      - name: Upload firmware to WeTransfer
        id: wetransfer
        if: github.event.inputs.UPLOAD_WETRANSFER == 'true' && !cancelled()
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer wet -s -p 16 --no-progress "${{ steps.tag.outputs.tag }}" 2>&1 | tee wetransfer.log
           echo "cowtransfer url: $(cat wetransfer.log | grep https)" >> $GITHUB_OUTPUT
          echo "::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d" ")"

      # 产生release 的信息
      - name: Generate release info
        id: release-tag
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
          touch release.txt
          [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
          [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
          echo "::set-output name=status::success"
          
      # 生成release
      - name: Upload firmware to release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          body_path: release.txt
          files: dist/*

      # 设置构建产物保存有效期
      - name: Delete workflow runs
        uses: GitRML/delete-workflow-runs@main
        with:
          retain_days: 1
          keep_minimum_runs: 3
