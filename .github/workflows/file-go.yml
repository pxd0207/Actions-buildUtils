name: file-go

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      repoPath:
        description: 'git仓库路径'
        required: true
      shellUrl:
        description: '自定义构建前脚本下载路径,可空'
        required: false
      GO_VERSION:
        description: 'go版本'
        required: false
        default: '1.19'
      UPLOAD_TRANSFER:
        description: '上传服务,如wet,见github.com/Mikubill/transfer#support'
        required: false
      UPLOAD_RELEASE:
        description: '是否上传到RELEASE页面'
        required: false
        default: 'false'
      UPLOAD_TAG:
        description: '上传文件用的TAG,默认使用构建时间'
        required: false
      platforms:
        description: '需要构建的平台'
        required: true
        default: linux/amd64,linux/arm64,linux/386,darwin/arm64,darwin/amd64,windows/amd64

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check Out
        uses: actions/checkout@v2
      # 产生tag
      - name: Generate tag
        id: tag
        run: |
          tag=$(date +'%m-%d_%H-%M-%S')
          [ ! "${{github.event.inputs.UPLOAD_TAG}}" = "" ] && tag=${{github.event.inputs.UPLOAD_TAG}}
          touch release.txt
          echo "tag=$tag" >> $GITHUB_OUTPUT

      # 克隆目标,并且准备上下文
      - name: Git clone
        run: |
         rm -rf {*,.[^.]*,..?*}
         git clone "${{github.event.inputs.repoPath}}" .
         if [[ "${{ github.event.inputs.dockerFileUrl }}" ]] ;then wget "${{github.event.inputs.dockerFileUrl}}" -O ./Dockerfile ; fi
         if [[ "${{ github.event.inputs.shellUrl }}" ]] ;then wget "${{github.event.inputs.shellUrl}}" -O /tmp/.customize_shell.sh ; chmod +x /tmp/.customize_shell.sh && /tmp/.customize_shell.sh; fi

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ github.event.inputs.GO_VERSION }}

#       # 开始构建
#       - name: Run GoReleaser
#         uses: goreleaser/goreleaser-action@v2
#         with:
#           args: build --skip-validate --rm-dist --timeout 90m
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 开始构建
      - name: Build
        run: |
          rm -rf dist
          mkdir dist
          platforms=${{ github.event.inputs.platforms }}
          cat > /tmp/run.sh <<- EOF
          #!/bin/bash
          echo "all platforms: $platforms"
          f(){
            platforms1=(\${platforms//,/ })
            echo "all platforms1: $platforms1"
            for platforms2 in \${dirs[*]}; do
              echo "all platforms2: $platforms2"
              p=(\${platforms2//,/ })
              OS="${p[0]}"
              ARCH="${p[1]}"
              echo "strart build \$platforms2"
              CGO_ENABLED=0 GOOS=\$OS GOARCH=\$ARCH go build -o "dist/\$OS_$ARCH" -buildmode=pie -ldflags="-w -s" -v &
            done
            wait
          }
          f
          wait
          EOF
          chmod 777 /tmp/run.sh
          cat /tmp/run.sh
          exec /tmp/run.sh
          ls -la dist
          tar -zcvf dist.tar.gz dist

      # 上传构建产物
      - name: Upload firmware directory
        uses: actions/upload-artifact@main
        with:
          name: ${{ steps.tag.outputs.tag }}
          path: dist

      # 上传到中转服务
      - name: Upload firmware to transfer
        id: transfer
        if: github.event.inputs.UPLOAD_TRANSFER && !failure() && !cancelled()
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer ${{ github.event.inputs.UPLOAD_TRANSFER }} -p 64 --no-progress dist.tar.gz 2>&1 | tee transfer.log
          echo "::warning file=transfer::$(cat transfer.log | grep https)"
          echo "url=$(cat transfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

      # 产生release 的信息
      - name: Generate release info
        id: release-tag
        if: github.event.inputs.UPLOAD_TRANSFER && !failure() && !cancelled()
        run: |
          echo "🔗 [transfer](${{ steps.transfer.outputs.url }})" >> release.txt
          echo "status=success" >> $GITHUB_OUTPUT
          
      # 生成release
      - name: Upload firmware to release
        uses: softprops/action-gh-release@v1
        if: github.event.inputs.UPLOAD_RELEASE == 'true' && !failure() && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          body_path: release.txt
          files: dist/*

      # 设置构建产物保存有效期
      - name: Delete workflow runs
        uses: GitRML/delete-workflow-runs@main
        with:
          retain_days: 1
          keep_minimum_runs: 3
